#!/bin/bash

#------------------------------------------------------------
# Usage
#------------------------------------------------------------

PROGRAM=$(basename $0)
read -r -d '' USAGE <<HEREDOC
Usage: $PROGRAM [options] <mpet_read1.fq> <mpet_read2.fq> <pet_read1.fq> <pet_read2.fq>

Gather PET reads for targeted assembly of MPET fragment(s).

Options:
    -a FILE   align reads to reference genome FILE after
              each iteration (for debugging) [disabled]
    -C        don't clean up intermediate files (for debugging)
    -h        show this help message
    -j N      threads [1]
    -k N      k-mer size for ABySS contig assembly [50]
    -K N      k-mer size for read overlap detection [25]
    -m N      max iterations for recruiting PET reads [10]
    -n N      max k-mers to recruit in total [25000]
    -o FILE   output file prefix ['kollector']
    -r FILE   Bloom filter containing repeat k-mers for
              exclusion from scoring calculations; must match
              k-mer size selected with -K opt [disabled]
    -s N      min score for recruiting seed PETs using seed MPETs;
              floating point number between 0 and 1 [0.5]
    -S N      min score for recruiting PETs from seed PETs and MPETs;
              floating point number between 0 and 1 [0.3]
HEREDOC

set -eu -o pipefail

#------------------------------------------------------------
# Parse command line opts
#------------------------------------------------------------

# default values for options
max_iterations=15
j=1
k=50
K=25
prefix=kollect
s=0.5
max_kmers=25000
S=0.3
help=0
clean=1

# parse command line options
while getopts :a:d:hCj:k:K:m:n:o:r:s:S: opt; do
	case $opt in
		a) ref=$OPTARG;;
		C) clean=0;;
		d) mpet_dist=$OPTARG;;
		h) help=1;;
		j) j=$OPTARG;;
		k) k=$OPTARG;;
		K) K=$OPTARG;;
		m) max_iterations=$OPTARG;;
		n) max_kmers=$OPTARG;;
		o) prefix=$OPTARG;;
		r) r=$OPTARG;;
		s) s=$OPTARG;;
		S) S=$OPTARG;;
		\?) echo "$PROGRAM: invalid option: $OPTARG"; exit 1;;
	esac
done
shift $((OPTIND-1))

# -h for help message
if [ $help -ne 0 ]; then
	echo "$USAGE"
	exit 0;
fi

# we expect exactly 4 file arguments
if [ $# -ne 4 ]; then
	echo "$USAGE" >&2
	exit 1;
fi
mpet1=$1; shift;
mpet2=$1; shift;
pet1=$1; shift;
pet2=$1; shift;

#------------------------------------------------------------
# Helper functions
#------------------------------------------------------------

# print progress message
function heading() {
	echo '-----------------------------------------'
	echo "$@"
	echo '-----------------------------------------'
}

heading "Recruiting a maximum of $max_kmers k-mers"

#------------------------------------------------------------
# Tag seed MPET/PET read pairs
#------------------------------------------------------------

# align seed MPETs
if [ "${ref+defined}" = 'defined' ]; then
	heading "Aligning seed MPET reads..."
	kollector-align.mk query="$mpet1 $mpet2" ref=$ref j=$j name=$(prefix).seed_mp
fi

# build seed FASTA file for recruiting PET reads
heading 'Building seed FASTA file...'
kollector-tag.mk name=$prefix mp="$mpet1 $mpet2" pe="$pet1 $pet2" \
	n=$max_kmers j=$j s=$s k=$K ${r+subtract=$r}

# align seed MPETs and PETs
if [ "${ref+defined}" = 'defined' ]; then
	heading "Aligning seed MPET and PET reads..."
	kollector-align.mk query=$prefix.seed.fa ref=$ref j=$j name=$prefix.seed.fa
fi

#------------------------------------------------------------
# Iteratively recruit PET read pairs from seed PET/MPET
#------------------------------------------------------------

for i in $(seq 1 $max_iterations); do

	# recruit PETs with paired overlap to previously recruited PETs
	heading "Recruiting PET reads (iteration $i)..."
	if [ $i -eq 1 ]; then
		seed=$prefix.seed.fa
	else
		seed=$prefix-$(($i-1)).fa
	fi
	kollector-recruit.mk name=$prefix-$i seed=$seed pe="$pet1 $pet2" \
		s=$S n=$max_kmers j=$j k=$K ${r+subtract=$r}

	# delete files from prev iteration
	if [ $clean -eq 1 ]; then
		if [ $i -eq 1 ]; then
			kollector-tag.mk name=$prefix clean
		else
			kollector-recruit.mk name=$prefix-$(($i-1)) clean
		fi
	fi

	# align PETs gathered so far to reference genome (debugging)
	if [ "${ref+defined}" = 'defined' ]; then
		heading "Aligning PET reads (iteration $i)..."
		kollector-align.mk query=$prefix-$i.fa ref=$ref j=$j name=$prefix-$i.fa
	fi
	
	# check for stopping condition
	kmers=$(awk -F= '$1=="num_entries" {print $2}' $prefix-$i.txt)
	heading "Recruited $kmers distinct k-mers so far (iteration $i)..."
	if [ $kmers -ge $max_kmers ]; then
		heading "Stopping. Recruited k-mers ($kmers) exceeded limit ($max_kmers)"
		break
	fi

done

# clean up last iteration
if [ $clean -eq 1 ]; then
	mv $prefix-$i.fa $prefix.fa
	kollector-recruit.mk name=$prefix-$i clean
else
	ln -sf $prefix-$i.fa $prefix.fa
fi

#------------------------------------------------------------
# Contig assembly with ABySS
#------------------------------------------------------------

abyss_dir=abyss
mkdir -p $abyss_dir

abyss-pe -C $abyss_dir k=$k name=$prefix in=../$prefix.fa contigs

# clean up assembly
if [ $clean -eq 1 ]; then
	rm $prefix.fa
	gzip -c $abyss_dir/$prefix-6.fa > $prefix-contigs.fa.gz
	rm -rf $abyss_dir
else
	gzip $abyss_dir/$prefix-6.fa
	ln -sf $abyss_dir/$prefix-6.fa.gz $prefix-contigs.fa.gz
fi

#------------------------------------------------------------
# Extract successfully assembled MPET frags
#------------------------------------------------------------

kollector-extract.mk name=$prefix-frags contigs=$prefix-contigs.fa.gz \
	mpet="$mpet1 $mpet2" j=$j
